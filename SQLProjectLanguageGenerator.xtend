/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import java.util.ArrayList
import java.util.List
import org.xtext.example.mydsl.sQLProjectLanguage.SQLSystem
import org.xtext.example.mydsl.sQLProjectLanguage.Add
import org.xtext.example.mydsl.sQLProjectLanguage.Remove
import org.xtext.example.mydsl.sQLProjectLanguage.Select
import org.xtext.example.mydsl.sQLProjectLanguage.Relationship
import org.xtext.example.mydsl.sQLProjectLanguage.Attribute
import org.xtext.example.mydsl.sQLProjectLanguage.MathExp
import org.xtext.example.mydsl.sQLProjectLanguage.Expression
import org.xtext.example.mydsl.sQLProjectLanguage.Numbers
import org.xtext.example.mydsl.sQLProjectLanguage.Addition
import org.xtext.example.mydsl.sQLProjectLanguage.Substraction
import org.xtext.example.mydsl.sQLProjectLanguage.Multiply
import org.xtext.example.mydsl.sQLProjectLanguage.Divide
import org.xtext.example.mydsl.sQLProjectLanguage.Parenthesis


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SQLProjectLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	val SQLSystem modelInstance = resource.allContents.filter(SQLSystem).next
		//modelInstance.display
		
		val addList = new ArrayList<Add> 
		addList.addAll(modelInstance.operation.filter(Add))
		
		val removeList = new ArrayList<Remove> 
		removeList.addAll(modelInstance.operation.filter(Remove))
		
		val selectList = new ArrayList<Select> 
		selectList.addAll(modelInstance.operation.filter(Select))
		
		val relationshipList = new ArrayList<Relationship> 
		relationshipList.addAll(modelInstance.operation.filter(Relationship))

		
		
		
		
		generateEntityFile(modelInstance, modelInstance.name,modelInstance.value,fsa, addList, removeList,selectList, relationshipList)
		
		
		
	   
		
	}
	

	
		def generateEntityFile(SQLSystem sqlsystem,String systemName, String url, IFileSystemAccess2 fsa, ArrayList<Add> addList, ArrayList<Remove> removeList, ArrayList<Select> selectList, ArrayList<Relationship> relationshipList) {
		fsa.generateFile(systemName.toFirstLower+"/db.java", generateEntity(systemName, url, addList, removeList,selectList,relationshipList))
		
		System::out.println(systemName.toFirstLower+"/db.java")
	}
	
	
		def int generate(MathExp gen) {
		gen.exp.generateExp
	}
		
	def dispatch int generateExp(Expression exp) { exp.left.generateExp }
	def dispatch int generateExp(Numbers exp) { exp.value }
	def dispatch int generateExp(Addition exp) { exp.left.generateExp+exp.right.generateExp }
	def dispatch int generateExp(Substraction exp) {exp.left.generateExp-exp.right.generateExp}
	def dispatch int generateExp(Multiply exp) {exp.left.generateExp*exp.right.generateExp}
	def dispatch int generateExp(Divide exp) {exp.left.generateExp/exp.right.generateExp}
	def dispatch int generateExp(Parenthesis exp){exp.exp.generateExp}
	
	
	def CharSequence generateEntity(String systemName, String url, ArrayList<Add> addList, ArrayList<Remove> removeList, ArrayList<Select> selectList, ArrayList<Relationship> relationshipList) '''
	package «systemName.toFirstLower»;
	import java.sql.Connection;
	import java.sql.DatabaseMetaData;
	import java.sql.DriverManager;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.sql.Statement;
	
	public class db {
	
	private String url = "«url»" ;
	private String username;
	private String password;
	Connection db = null;
	
	
	«generateConstructor()»
	
	
	«FOR a:addList» 
	«generateAddStatement(a)»
	 «ENDFOR»
	 
	«FOR a:selectList» 
		«generateSelectStament(a)»
    «ENDFOR»

	«FOR a:removeList» 
		«generateRemoveStatement(a)»
		 «ENDFOR»

	
	 «FOR a:relationshipList» 
	 		«generateRelationshipStament(a)»
	 		 «ENDFOR» 
	}
	'''
	
	
	def generateAddStatement(Add entity) '''
	 public void add«entity.name»(«IF entity.primaryKey !== null»«entity.primaryKey.type» «entity.primaryKey.name», «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.type» «a.name»«ENDFOR»){
	 	try {
	 	      Statement st = db.createStatement();
	 	      DatabaseMetaData dbm = db.getMetaData();
	 	      ResultSet tables = dbm.getTables(null, null, "«entity.name»", null);
	 	       if(tables.next()){
	 	         
	 	        }else{
	 	          ResultSet rs = st.executeQuery("CREATE TABLE «entity.name»(«IF entity.primaryKey !== null»«entity.primaryKey.name»«IF entity.primaryKey.type == "String"» varchar(255)«ELSE» int«ENDIF», «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.name»«IF a.type == "String"» varchar(255)«ELSE» int«ENDIF»«ENDFOR»«IF entity.primaryKey!= null», PRIMARY KEY(«entity.primaryKey.name»)«ENDIF»);");
	 	            }
	 	            st.close();
	 	            //st2.close();
	 	            }
	 	        catch (java.sql.SQLException e) {
	 	            System.out.println(e.getMessage());
	 	        }try {
	 	            Statement st = db.createStatement();
	 	            «IF (entity.primaryKey !== null && entity.primaryKey.requirement1 !== null || entity.primaryKey.keyStr !== null) || checkForNull(entity) == true»if(«IF (entity.primaryKey !== null && entity.primaryKey.requirement1 !== null)» «entity.primaryKey.name» «entity.primaryKey.requirement1.op.type» «entity.primaryKey.requirement1.right.generate»«IF checkForNull(entity) == true» && «ENDIF»«ELSEIF entity.primaryKey !== null && entity.primaryKey.keyStr !== null» «entity.primaryKey.name» = "«entity.primaryKey.keyStr.primStr»"«IF checkForNull(entity) == true» && «ENDIF»«ENDIF» «IF checkForNull(entity) == true» «displayAllRequire(entity.attributes)»  «ENDIF»){«ENDIF»
	 	            ResultSet rs2 = st.executeQuery("INSERT INTO «entity.name»(«IF entity.primaryKey !== null»«entity.primaryKey.name», «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.name»«ENDFOR») VALUES(«IF entity.primaryKey!== null»«IF entity.primaryKey.type == "String"»'"+«entity.primaryKey.name»+"'«ELSE» '"+«entity.primaryKey.name»+"'«ENDIF», «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«IF a.type == "String"»'"+«a.name»+"'«ELSE»'"+«a.name»+"'«ENDIF»«ENDFOR»);");
	 	            rs2.close();
	 	            st.close();
	 	             «IF (entity.primaryKey !== null && entity.primaryKey.requirement1 !== null) || checkForNull(entity) == true»}«ENDIF»
	 	            }
	 	        catch (java.sql.SQLException e) {
	 	            System.out.println(e.getMessage());
	 	        } 
	 	
	 }
	 
	 '''
	def displayAllRequire(List<Attribute> entity){
		var str = ""
		for(i: 0 ..< entity.size){
			if(entity.get(i).requirement1 !== null ){
				str = str + entity.get(i).name+" "+ entity.get(i).requirement1.op.type +" "+entity.get(i).requirement1.right.generate +  " && "
				if(i+1 == entity.size){
					str = str.substring(0,str.length - 4)
					
			 }
					
			} 
			if(entity.get(i).stringBute !== null ){
				str = str + entity.get(i).name+" = \""+entity.get(i).stringBute.attString +"\"" +  " && "
				if(i+1 == entity.size){
					str = str.substring(0,str.length - 4)
					
			 }
					
			} 
		}
		if( str.substring(str.length - 4, str.length) == " && " ){
			str = str.substring(0,str.length - 4)
		}
		str
	}
	
	def generateRemoveStatement(Remove entity)'''
	
	 public void remove«entity.name»(«showAllNoneRequire(entity.attributes)»){
	        try {
	            
	            Statement st = db.createStatement();
	            ResultSet rs = st.executeQuery("Delete FROM «entity.table.table.name» WHERE «FOR a:entity.attributes SEPARATOR " and "»«IF a.requirement1 !== null|| a.stringBute!==null»«displayAllSelectRequire(a)»«ELSE»«a.name»«IF a.type == "String"» ='"+«a.name»+"'«ENDIF»«ENDIF»«ENDFOR»");
	          
	            rs.close();
	            st.close();
	            }
	        catch (java.sql.SQLException e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    
	'''
	
	def checkForNull(Add entity){
		var test = false
		for(Attribute a : entity.attributes){
			if(a.requirement1 !== null){
				test = true
			}
		}
		test
	} 
	
	

	
	def showAllNoneRequire(List<Attribute> entity){
		var str ="" 
		for(i: 0 ..< entity.size){
			if(entity.get(i).requirement1 == null && entity.get(i).stringBute == null){
				str = str + entity.get(i).type+ " "+ entity.get(i).name+ " , "
			}
		}
		if(str.length > 0 )
		if(str.substring(str.length - 3, str.length) == " , " ){
			str = str.substring(0,str.length - 3)
		}
		str
		
	}
	
	
	
	def generateSelectStament(Select entity)'''
	 public void select«entity.name»(«showAllNoneRequire(entity.attributes)»){
	        try {
	            Statement st = db.createStatement();
	            ResultSet rs = st.executeQuery("SELECT * FROM «entity.table.table.name» WHERE«FOR a:entity.attributes SEPARATOR " and"» «IF a.requirement1 !== null || a.stringBute !== null»«displayAllSelectRequire(a)»«ELSE»«a.name»«IF a.type == "String"» ='"+«a.name»+"'«ELSE» ="+«a.name»+"«ENDIF»«ENDIF»«ENDFOR»");
	
	            while (rs.next()) {
	             «var n = 1»
	             «FOR a:entity.attributes»
	              System.out.print("«a.name» returned");
	              System.out.println(rs.getString(«n»));
	              //«n = n+1»
	             «ENDFOR»
	             
	            }
	            rs.close();
	            st.close();
	            }
	        catch (java.sql.SQLException e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    
	'''
	
def displayAllSelectRequire(Attribute entity){
        var str = ""
        if(entity.requirement1!= null){
        str = str+ entity.name +" "+entity.requirement1.op.type +" "+entity.requirement1.right.generate
        }
        if(entity.stringBute != null){
            str = str + entity.name+ " = '"+entity.stringBute.attString+"'"
        }
        str
        }
		
		
		
		
	
	
	def generateRelationshipStament(Relationship entity)'''
	    public void relationship«entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.type» «a.name»«ENDFOR»){
	            try {
	                Statement st = db.createStatement();
	                DatabaseMetaData dbm = db.getMetaData();
	                ResultSet tables = dbm.getTables(null, null,"«entity.name»" , null);
	                if(tables.next()){
	                    
	                }else{
	                 ResultSet rs = st.executeQuery("CREATE TABLE «entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»
	                 «a.name»«IF a.type == "String"» varchar(255)«ELSE» int«ENDIF»«ENDFOR» ,
	                 «FOR a:entity.foreignkey SEPARATOR ", "» FOREIGN KEY(«a.name») REFERENCES «a.overType.name» («a.name»)«ENDFOR»);");
	                           
	                }
	                
	                st.close();
	                //st2.close();
	                }
	            catch (java.sql.SQLException e) {
	                System.out.println(e.getMessage());
	            }try {
	                Statement st = db.createStatement();
	                ResultSet rs2 = st.executeQuery("INSERT INTO «entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.name»«ENDFOR») VALUES(«FOR a:entity.foreignkey SEPARATOR ", "»«IF a.type =="String"»'"+«a.name»+"'«ELSE»'"+«a.name»+"'«ENDIF»«ENDFOR»);");
	                rs2.close();
	                st.close();
	                //st2.close();
	                }
	            catch (java.sql.SQLException e) {
	                System.out.println(e.getMessage());
	            }
	        }
	    
		'''
	 
	
	
	
	def generateConstructor() '''
	public db (String Username, String Password) throws SQLException{
		this.username = Username;
		this.password = Password;
		
		try{
		Class.forName("org.postgresql.Driver");
		db = DriverManager.getConnection(url, Username, Password);
	 	}
		catch (java.lang.ClassNotFoundException e) {
	            System.out.println(e.getMessage());
	     }
	}
	 
	'''
	
	
	
	
	
	
		def display(EObject model) {
  		val res = new XMLResourceImpl
  		res.contents.add(EcoreUtil::copy(model))
  		System::out.println("Dump of model:")
  		res.save(System.out, null);
	}
}